{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"names":["View","data","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","CharInfo","charId","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","CharSearchForm","getCharacterByName","errorMessage","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","content","decoration","display","width","height","objectFit","margin","img","useHttp","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","_apiBase","_apiKey","a","res","_transformCharacter","getAllComics","_transformComics","getComics","slice","path","extension","urls","title","pageCount","language","textObjects","prices","price","Skeleton"],"mappings":"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","file":"static/js/5.d2437eff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(\"\");\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {/* {errorMessage}\n                {spinner}\n                {content} */}\n                {setContent(process, View, char)}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button className=\"button button__main\" onClick={updateChar}>\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\n    const View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useEffect, useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected char state')\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if(newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove(\"char__item_selected\"));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    };\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg' || \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                        <CSSTransition key={item.id} timeout={500} classNames='char__item'>\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if(e.key === \" \" || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n            <TransitionGroup component={null}>\n                {items}\n            </TransitionGroup>\n            </ul>\n        )\n    }\n    // старый способ\n    // const items = renderItems(charList);\n\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n    \n    return (\n        <div className=\"char__list\">\n            {/* заготовка под старый способ\n            {errorMessage}\n            {spinner}\n            {items} */}\n            {elements}\n            <button \n            className=\"button button__main button__long\" \n            disabled={newItemLoading}\n            style={{'display': charEnded ? \"none\" : 'block'}}\n            onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        \n        clearError()\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n    \n    // Старый способ (рабочий)\n    // const skeleton = char || loading || error ? null : <Skeleton/>;\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {/* заготовка под старый способ\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">{description}</div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                 </li>\n                            )\n                        }) \n                    }\n\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.string\n}\n\nexport default CharInfo;","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state =  {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Form, Formik, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250 px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=''/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n    // const [loading, setLoading] = useState(false);\r\n    // const [error, setError] = useState(null);\r\n    //FSM принцип конечного автомата\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        // setLoading(true);\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            if(!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            // setLoading(false);\r\n\r\n            return data\r\n        \r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        // setError(null);\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess};\r\n}\r\n\r\nexport default useHttp;\r\n","import useHttp from '../hooks/http.hook'\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=42e09bced1848d4ec4fd4dc5a818c5f2\";\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : \"No Description, Sorry!\",\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"No Description, Sorry!\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            language: comics.textObjects.language || 'en-us',\r\n            prices: comics.prices.price ? `${comics.prices.price}$` : 'Not Available'\r\n        }\r\n    }\r\n\r\n    return {\r\n            process,\r\n            setProcess,\r\n            getAllCharacters,\r\n            getCharacter, clearError,\r\n            getAllComics,\r\n            getComics,\r\n            getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n        case 'loading':\r\n            return <Spinner/>\r\n        case 'confirmed':\r\n            return <Component data={data}/>\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected char state')\r\n    }\r\n}\r\n\r\nexport default setContent;"],"sourceRoot":""}